module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCafe {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Cafe {
  name: String!
  id: ID!
  city: String!
  address: String!
}

type CafeConnection {
  pageInfo: PageInfo!
  edges: [CafeEdge]!
  aggregate: AggregateCafe!
}

input CafeCreateInput {
  name: String!
  id: ID
  city: String!
  address: String!
}

type CafeEdge {
  node: Cafe!
  cursor: String!
}

enum CafeOrderByInput {
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  city_ASC
  city_DESC
  address_ASC
  address_DESC
}

type CafePreviousValues {
  name: String!
  id: ID!
  city: String!
  address: String!
}

type CafeSubscriptionPayload {
  mutation: MutationType!
  node: Cafe
  updatedFields: [String!]
  previousValues: CafePreviousValues
}

input CafeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CafeWhereInput
  AND: [CafeSubscriptionWhereInput!]
  OR: [CafeSubscriptionWhereInput!]
  NOT: [CafeSubscriptionWhereInput!]
}

input CafeUpdateInput {
  name: String
  city: String
  address: String
}

input CafeUpdateManyMutationInput {
  name: String
  city: String
  address: String
}

input CafeWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  AND: [CafeWhereInput!]
  OR: [CafeWhereInput!]
  NOT: [CafeWhereInput!]
}

input CafeWhereUniqueInput {
  name: String
  id: ID
}

scalar Long

type Mutation {
  createCafe(data: CafeCreateInput!): Cafe!
  updateCafe(data: CafeUpdateInput!, where: CafeWhereUniqueInput!): Cafe
  updateManyCafes(data: CafeUpdateManyMutationInput!, where: CafeWhereInput): BatchPayload!
  upsertCafe(where: CafeWhereUniqueInput!, create: CafeCreateInput!, update: CafeUpdateInput!): Cafe!
  deleteCafe(where: CafeWhereUniqueInput!): Cafe
  deleteManyCafes(where: CafeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  cafe(where: CafeWhereUniqueInput!): Cafe
  cafes(where: CafeWhereInput, orderBy: CafeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cafe]!
  cafesConnection(where: CafeWhereInput, orderBy: CafeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CafeConnection!
  node(id: ID!): Node
}

type Subscription {
  cafe(where: CafeSubscriptionWhereInput): CafeSubscriptionPayload
}
`
      }
    