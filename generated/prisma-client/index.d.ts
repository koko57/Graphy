// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  coffee: (where?: CoffeeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  coffee: (where: CoffeeWhereUniqueInput) => CoffeeNullablePromise;
  coffees: (args?: {
    where?: CoffeeWhereInput;
    orderBy?: CoffeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Coffee>;
  coffeesConnection: (args?: {
    where?: CoffeeWhereInput;
    orderBy?: CoffeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CoffeeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCoffee: (data: CoffeeCreateInput) => CoffeePromise;
  updateCoffee: (args: {
    data: CoffeeUpdateInput;
    where: CoffeeWhereUniqueInput;
  }) => CoffeePromise;
  updateManyCoffees: (args: {
    data: CoffeeUpdateManyMutationInput;
    where?: CoffeeWhereInput;
  }) => BatchPayloadPromise;
  upsertCoffee: (args: {
    where: CoffeeWhereUniqueInput;
    create: CoffeeCreateInput;
    update: CoffeeUpdateInput;
  }) => CoffeePromise;
  deleteCoffee: (where: CoffeeWhereUniqueInput) => CoffeePromise;
  deleteManyCoffees: (where?: CoffeeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  coffee: (
    where?: CoffeeSubscriptionWhereInput
  ) => CoffeeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CoffeeOrderByInput =
  | "name_ASC"
  | "name_DESC"
  | "id_ASC"
  | "id_DESC"
  | "roaster_ASC"
  | "roaster_DESC"
  | "origin_ASC"
  | "origin_DESC"
  | "rating_ASC"
  | "rating_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CoffeeCreateInput {
  name: String;
  id?: Maybe<ID_Input>;
  roaster?: Maybe<String>;
  origin?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface CoffeeUpdateInput {
  name?: Maybe<String>;
  roaster?: Maybe<String>;
  origin?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface CoffeeWhereInput {
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  roaster?: Maybe<String>;
  roaster_not?: Maybe<String>;
  roaster_in?: Maybe<String[] | String>;
  roaster_not_in?: Maybe<String[] | String>;
  roaster_lt?: Maybe<String>;
  roaster_lte?: Maybe<String>;
  roaster_gt?: Maybe<String>;
  roaster_gte?: Maybe<String>;
  roaster_contains?: Maybe<String>;
  roaster_not_contains?: Maybe<String>;
  roaster_starts_with?: Maybe<String>;
  roaster_not_starts_with?: Maybe<String>;
  roaster_ends_with?: Maybe<String>;
  roaster_not_ends_with?: Maybe<String>;
  origin?: Maybe<String>;
  origin_not?: Maybe<String>;
  origin_in?: Maybe<String[] | String>;
  origin_not_in?: Maybe<String[] | String>;
  origin_lt?: Maybe<String>;
  origin_lte?: Maybe<String>;
  origin_gt?: Maybe<String>;
  origin_gte?: Maybe<String>;
  origin_contains?: Maybe<String>;
  origin_not_contains?: Maybe<String>;
  origin_starts_with?: Maybe<String>;
  origin_not_starts_with?: Maybe<String>;
  origin_ends_with?: Maybe<String>;
  origin_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  AND?: Maybe<CoffeeWhereInput[] | CoffeeWhereInput>;
  OR?: Maybe<CoffeeWhereInput[] | CoffeeWhereInput>;
  NOT?: Maybe<CoffeeWhereInput[] | CoffeeWhereInput>;
}

export interface CoffeeUpdateManyMutationInput {
  name?: Maybe<String>;
  roaster?: Maybe<String>;
  origin?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface CoffeeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CoffeeWhereInput>;
  AND?: Maybe<CoffeeSubscriptionWhereInput[] | CoffeeSubscriptionWhereInput>;
  OR?: Maybe<CoffeeSubscriptionWhereInput[] | CoffeeSubscriptionWhereInput>;
  NOT?: Maybe<CoffeeSubscriptionWhereInput[] | CoffeeSubscriptionWhereInput>;
}

export type CoffeeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateCoffee {
  count: Int;
}

export interface AggregateCoffeePromise
  extends Promise<AggregateCoffee>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCoffeeSubscription
  extends Promise<AsyncIterator<AggregateCoffee>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CoffeePreviousValues {
  name: String;
  id: ID_Output;
  roaster?: String;
  origin?: String;
  rating?: Int;
}

export interface CoffeePreviousValuesPromise
  extends Promise<CoffeePreviousValues>,
    Fragmentable {
  name: () => Promise<String>;
  id: () => Promise<ID_Output>;
  roaster: () => Promise<String>;
  origin: () => Promise<String>;
  rating: () => Promise<Int>;
}

export interface CoffeePreviousValuesSubscription
  extends Promise<AsyncIterator<CoffeePreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  roaster: () => Promise<AsyncIterator<String>>;
  origin: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
}

export interface CoffeeEdge {
  node: Coffee;
  cursor: String;
}

export interface CoffeeEdgePromise extends Promise<CoffeeEdge>, Fragmentable {
  node: <T = CoffeePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CoffeeEdgeSubscription
  extends Promise<AsyncIterator<CoffeeEdge>>,
    Fragmentable {
  node: <T = CoffeeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CoffeeSubscriptionPayload {
  mutation: MutationType;
  node: Coffee;
  updatedFields: String[];
  previousValues: CoffeePreviousValues;
}

export interface CoffeeSubscriptionPayloadPromise
  extends Promise<CoffeeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoffeePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoffeePreviousValuesPromise>() => T;
}

export interface CoffeeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CoffeeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CoffeeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoffeePreviousValuesSubscription>() => T;
}

export interface Coffee {
  name: String;
  id: ID_Output;
  roaster?: String;
  origin?: String;
  rating?: Int;
}

export interface CoffeePromise extends Promise<Coffee>, Fragmentable {
  name: () => Promise<String>;
  id: () => Promise<ID_Output>;
  roaster: () => Promise<String>;
  origin: () => Promise<String>;
  rating: () => Promise<Int>;
}

export interface CoffeeSubscription
  extends Promise<AsyncIterator<Coffee>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  roaster: () => Promise<AsyncIterator<String>>;
  origin: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
}

export interface CoffeeNullablePromise
  extends Promise<Coffee | null>,
    Fragmentable {
  name: () => Promise<String>;
  id: () => Promise<ID_Output>;
  roaster: () => Promise<String>;
  origin: () => Promise<String>;
  rating: () => Promise<Int>;
}

export interface CoffeeConnection {
  pageInfo: PageInfo;
  edges: CoffeeEdge[];
}

export interface CoffeeConnectionPromise
  extends Promise<CoffeeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CoffeeEdge>>() => T;
  aggregate: <T = AggregateCoffeePromise>() => T;
}

export interface CoffeeConnectionSubscription
  extends Promise<AsyncIterator<CoffeeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CoffeeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCoffeeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Coffee",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
